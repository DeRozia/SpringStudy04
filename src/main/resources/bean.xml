<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring管理-->
    <!--spring对bean的管理细节
         1.创建bean的三种方式
         2.bean对象的作用范围
         3.bean对象的生命周期
    -->
    <!--创建bean的三种方法-->
    <!--第一种方式：使用默认构造函数创建
              在spring的配置文件中适用bean标签，配以ID和class属性之后，且没有其他标签和属性时
              采用的就是默认构造函数创建bean对象，此时如果没有默认构造函数，则对象无法创建。
    <bean id="accountService" class="service.impl.AccountServiceImpl"></bean>
    -->

    <!--第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并且存入spring容器中）
               该类通常是jar包中的class，无法通过编译修改
    <bean id="instancefactory" class="factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instancefactory" factory-method="getAccountService"></bean>
    -->


    <!--第三种方法：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并且存入spring容器中）
                该类通常是jar包中的class，无法通过编译修改
    <bean id="accountService" class="factory.StaticFactory" factory-method="getAccountService"></bean>
    -->
    <!--bean的作用范围调整：
       bean标签的scope属性：
        作用：用于指定bean的作用范围
        取值：
            singleton:单例（默认）
            prototype:多例
            request:作用于web应用的请求范围
            session：作用于web应用的会话范围
            global—session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，==session

    -->
    <!--bean对象的生命周期：
         单例对象：
          出生：当容器创建时对象出生
          活着：只要容器还在，对象一直存在
          死亡：容器销毁，对象死亡
          即：单例对象的生命周期和容器相同
         多利对象：
          出生：当我们使用对象时spring框架为我们创建
          活着：对象在使用的过程中一直活着
          死亡：当对象长时间不用且没有别的对象应用的时候，被java回收机制销毁
    -->
    <!--spring中的依赖注入
        依赖注入：
          Dependency Injection
        IOC的作用：
          降低程序间的耦合（依赖关系）
        依赖关系的管理：
          以后都交给spring来维护
            在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
           依赖关系的维护，就称之为依赖注入
         依赖注入：
           能注入的数据，有三类：
             基本类型和string
             其他bean类型（在配置文件中或者主食配置过的bean）
             复杂类型/集合类型
           注入的方法，有三种：
             第一种，使用构造函数提供
             第二种，使用set方法提供
             第三种，使用注解提供
    -->

    <!--构造函数注入
    使用的标签：constructor-arg
       type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或者某些参数的类型
       index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始
       name:用于指定给构造函数中指定名称的参数赋值  （最常用）
      ============以上三种都是用于指定给构造函数中那个参数赋值===================
       value:用于提供基本类型和S挺类型的数据
       ref:用于指定其他的bean类型数据，他指的就是在spring的IOC核心容器中出现过的bean对象
    优势：
      在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
    弊端：
      改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供
    -->
    <bean id="accountService" class="service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="haha"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <!--配置一个日期对象-->
    <bean id="now"  class="java.util.Date"></bean>


    <!--set方法注入
      设计的标签：property
      出现的位置：bean标签的内部
      标签的属性：
         name:用于指定注入时所调用的set方法名称
         value:用于提供基本类型和S挺类型的数据
         ref:用于指定其他的bean类型数据，他指的就是在spring的IOC核心容器中出现过的bean对象
      优劣势和构造方法互补
    -->
<!--    <bean id="accountService2" class="service.impl.AccountServiceImpl2">-->
<!--        <property name="name" value="HAHA"></property>-->
<!--        <property name="age " value="21"></property>-->
<!--        <property name="birthday" ref="now"></property>-->
<!--    </bean>-->


    <!--复杂类型/集合类型的注入：
       用于给List结构集合注入的标签：
         list array set
       用于给Map结构集合注入的标签：
         map pros
          结构相同，标签可以互换
    -->
    <bean id="accountService3" class="service.impl.AccountServiceImpl3">
    <property name="myStrs">
        <array>
            <value>aaa</value>
            <value>bbb</value>
            <value>ccc</value>
        </array>
    </property>

        <property name="myList">
        <list>
            <value>AAA</value>
            <value>BBB</value>
            <value>CCC</value>
        </list>
    </property>

        <property name="mySet">
           <set>
               <value>abc</value>
               <value>abc</value>
               <value>abc</value>
           </set>
        </property>

        <property name="myMap">
            <map>
                <entry key="texta" value="AAA"></entry>
                <entry key="textb" value="BBB"></entry>
            </map>
        </property>

        <property name="myPros">
            <props>
                <prop key="textc">CCC</prop>
                <prop key="textd">DDD</prop>
            </props>
        </property>



</bean>



</beans>